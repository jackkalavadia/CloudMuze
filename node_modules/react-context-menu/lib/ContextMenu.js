'use strict';

exports.__esModule = true;
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _MenuItem = require('./@components/MenuItem');

var _MenuItem2 = _interopRequireDefault(_MenuItem);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ContextMenu = function (_React$PureComponent) {
  _inherits(ContextMenu, _React$PureComponent);

  function ContextMenu(props) {
    _classCallCheck(this, ContextMenu);

    var _this = _possibleConstructorReturn(this, _React$PureComponent.call(this, props));

    _this.getItems = _this.getItems.bind(_this);
    _this.openContextMenu = _this.openContextMenu.bind(_this);
    _this.closeContextMenu = _this.closeContextMenu.bind(_this);

    _this.state = {
      target: ''
    };
    return _this;
  }

  ContextMenu.prototype.componentDidMount = function componentDidMount() {
    var _this2 = this;

    var contextId = this.props.contextId;

    var context = document.getElementById(contextId);
    context.addEventListener('contextmenu', function (event) {
      _this2.openContextMenu(event);
    });

    var menu = document.getElementById('contextMenu');
    menu.addEventListener('mouseleave', function () {
      var closeOnClickOut = _this2.props.closeOnClickOut;

      if (!closeOnClickOut) {
        _this2.closeContextMenu();
      }
    });

    document.addEventListener('click', function (event) {
      var closeOnClickOut = _this2.props.closeOnClickOut;


      if (closeOnClickOut && !menu.contains(event.target)) {
        event.preventDefault();
        _this2.closeContextMenu();
      }
    });
  };

  ContextMenu.prototype.openContextMenu = function openContextMenu(event) {
    event.preventDefault();
    this.setState({ target: event.target });

    var xOffset = Math.max(document.documentElement.scrollLeft, document.body.scrollLeft);
    var yOffset = Math.max(document.documentElement.scrollTop, document.body.scrollTop);

    var menu = document.getElementById('contextMenu');

    menu.style.cssText = menu.style.cssText + ('left: ' + (event.clientX + xOffset) + 'px;') + ('top: ' + (event.clientY + yOffset) + 'px;') + 'visibility: visible;';
  };

  ContextMenu.prototype.closeContextMenu = function closeContextMenu() {
    var menu = document.getElementById('contextMenu');
    menu.style.cssText = menu.style.cssText + 'visibility: hidden;';
  };

  ContextMenu.prototype.getItems = function getItems() {
    var _this3 = this;

    var _props = this.props,
        items = _props.items,
        closeOnClick = _props.closeOnClick;

    if (closeOnClick) {
      return items.map(function (item) {
        return _extends({}, item, {
          onClick: function onClick() {
            _this3.closeContextMenu();
            item.onClick();
          }
        });
      });
    } else {
      return items;
    }
  };

  ContextMenu.prototype.render = function render() {
    return _react2.default.createElement(
      'div',
      {
        id: 'contextMenu',
        style: { "position": "absolute", "display": "flex", "flexFlow": "column", "border": "1px solid rgba(0,0,0,0.15)", "borderRadius": "2px", "boxShadow": "0 1px 1px 1px rgba(0,0,0,0.05)", "padding": "10px 15px", "background": "#f8f8f8", "visibility": "hidden" }
      },
      this.getItems().map(function (item) {
        return _react2.default.createElement(_MenuItem2.default, { item: item, key: item.label });
      })
    );
  };

  return ContextMenu;
}(_react2.default.PureComponent);

exports.default = ContextMenu;


ContextMenu.propTypes = process.env.NODE_ENV !== "production" ? {
  items: _propTypes2.default.arrayOf(_propTypes2.default.shape({
    label: _propTypes2.default.string.isRequired,
    onClick: _propTypes2.default.func.isRequired,
    icon: _propTypes2.default.string
  })),
  contextId: _propTypes2.default.string.isRequired,
  closeOnClick: _propTypes2.default.bool
} : {};

ContextMenu.defaultProps = {
  items: [],
  closeOnClick: false
};
module.exports = exports['default'];