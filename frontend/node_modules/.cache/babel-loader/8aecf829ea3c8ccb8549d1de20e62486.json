{"ast":null,"code":"var _jsxFileName = \"/Users/spartan/Downloads/sleepify/frontend/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Root from \"./components/root\";\nimport configureStore from './store/store';\nimport jwt_decode from 'jwt-decode';\nimport { setAuthToken } from './util/session_api_util';\nimport { logout } from './actions/session_actions'; // import * as apiUtil from \"./util/session_api_util.js\"\n// used for testing\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const root = document.getElementById(\"root\");\n  let store;\n\n  if (localStorage.jwtToken) {\n    setAuthToken(localStorage.jwtToken);\n    const decodedUser = jwt_decode(localStorage.jwtToken);\n    const preloadedState = {\n      session: {\n        isAuthenticated: true,\n        user: decodedUser\n      }\n    };\n    store = configureStore(preloadedState);\n    const currentTime = Date.now() / 1000;\n\n    if (decodedUser.exp < currentTime) {\n      store.dispatch(logout());\n      window.location.href = '/#/login';\n    }\n  } else {\n    store = configureStore();\n  } // TESTING START\n\n\n  window.getState = store.getState; // window.dispatch = store.dispatch;\n  // window.logout\n\n  window.store = store; // TESTING END\n\n  ReactDOM.render( /*#__PURE__*/React.createElement(Root, {\n    store: store,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 21\n    }\n  }), root);\n});","map":{"version":3,"sources":["/Users/spartan/Downloads/sleepify/frontend/src/index.js"],"names":["React","ReactDOM","Root","configureStore","jwt_decode","setAuthToken","logout","document","addEventListener","root","getElementById","store","localStorage","jwtToken","decodedUser","preloadedState","session","isAuthenticated","user","currentTime","Date","now","exp","dispatch","window","location","href","getState","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,cAAP,MAA2B,eAA3B;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,SAASC,YAAT,QAA6B,yBAA7B;AACA,SAASC,MAAT,QAAuB,2BAAvB,C,CAEA;AACA;;AAEAC,QAAQ,CAACC,gBAAT,CAA0B,kBAA1B,EAA8C,MAAM;AAChD,QAAMC,IAAI,GAAGF,QAAQ,CAACG,cAAT,CAAwB,MAAxB,CAAb;AACA,MAAIC,KAAJ;;AACA,MAAIC,YAAY,CAACC,QAAjB,EAA2B;AACvBR,IAAAA,YAAY,CAACO,YAAY,CAACC,QAAd,CAAZ;AACA,UAAMC,WAAW,GAAGV,UAAU,CAACQ,YAAY,CAACC,QAAd,CAA9B;AACA,UAAME,cAAc,GAAG;AAAEC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,eAAe,EAAE,IAAnB;AAAyBC,QAAAA,IAAI,EAAEJ;AAA/B;AAAX,KAAvB;AAEAH,IAAAA,KAAK,GAAGR,cAAc,CAACY,cAAD,CAAtB;AAEA,UAAMI,WAAW,GAAGC,IAAI,CAACC,GAAL,KAAa,IAAjC;;AAEA,QAAIP,WAAW,CAACQ,GAAZ,GAAkBH,WAAtB,EAAmC;AACjCR,MAAAA,KAAK,CAACY,QAAN,CAAejB,MAAM,EAArB;AACAkB,MAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,UAAvB;AACD;AACJ,GAbD,MAaO;AACHf,IAAAA,KAAK,GAAGR,cAAc,EAAtB;AACH,GAlB+C,CAoBhD;;;AACAqB,EAAAA,MAAM,CAACG,QAAP,GAAkBhB,KAAK,CAACgB,QAAxB,CArBgD,CAsBhD;AACA;;AACAH,EAAAA,MAAM,CAACb,KAAP,GAAeA,KAAf,CAxBgD,CAyBhD;;AAEAV,EAAAA,QAAQ,CAAC2B,MAAT,eAAgB,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEjB,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAhB,EAAwCF,IAAxC;AACH,CA5BD","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Root from \"./components/root\"\nimport configureStore from './store/store';\nimport jwt_decode from 'jwt-decode';\n\nimport { setAuthToken } from './util/session_api_util';\nimport { logout } from './actions/session_actions';\n\n// import * as apiUtil from \"./util/session_api_util.js\"\n// used for testing\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    const root = document.getElementById(\"root\")\n    let store;\n    if (localStorage.jwtToken) {\n        setAuthToken(localStorage.jwtToken);\n        const decodedUser = jwt_decode(localStorage.jwtToken);\n        const preloadedState = { session: { isAuthenticated: true, user: decodedUser } };\n        \n        store = configureStore(preloadedState);\n    \n        const currentTime = Date.now() / 1000;\n    \n        if (decodedUser.exp < currentTime) {\n          store.dispatch(logout());\n          window.location.href = '/#/login';\n        }\n    } else {\n        store = configureStore()\n    }\n    \n    // TESTING START\n    window.getState = store.getState;\n    // window.dispatch = store.dispatch;\n    // window.logout\n    window.store = store;\n    // TESTING END\n\n    ReactDOM.render(<Root store={store} />, root)\n})"]},"metadata":{},"sourceType":"module"}