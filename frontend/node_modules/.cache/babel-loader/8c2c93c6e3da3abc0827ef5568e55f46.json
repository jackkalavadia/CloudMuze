{"ast":null,"code":"var _jsxFileName = \"/Users/spartan/Downloads/sleepify/frontend/src/components/player/player.js\";\nimport React from 'react';\nimport PlayerInfoContainer from './player_info_container';\nimport { Link } from 'react-router-dom';\n\nclass Player extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      play: false,\n      time: 0,\n      duration: 0,\n      mute: false,\n      repeat: false,\n      shuffle: false\n    };\n    this.audio = React.createRef();\n    this.play = this.play.bind(this);\n    this.handleonPlay = this.handleonPlay.bind(this);\n    this.pause = this.pause.bind(this);\n    this.updateTime = this.updateTime.bind(this);\n    this.parseTime = this.parseTime.bind(this);\n    this.updateVolume = this.updateVolume.bind(this);\n    this.volumeBtn = this.volumeBtn.bind(this);\n    this.toggleMute = this.toggleMute.bind(this);\n    this.toggleRepeat = this.toggleRepeat.bind(this);\n    this.nextTrack = this.nextTrack.bind(this);\n    this.prevTrack = this.prevTrack.bind(this);\n    this.toggleShuffle = this.toggleShuffle.bind(this);\n    this.handleEnded = this.handleEnded.bind(this);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.volume !== this.props.volume) {\n      this.audio.volume = this.props.volume;\n    }\n\n    if (prevProps.currentTrack !== this.props.currentTrack) {\n      clearInterval(this.interval);\n    }\n\n    if (prevProps.currentTrack !== this.props.currentTrack && this.props.currentTrack === undefined) {\n      this.setState({\n        pause: true\n      });\n      this.audio.pause();\n      clearInterval(this.interval);\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n    this.props.removeEverything();\n  }\n\n  play(e) {\n    e.preventDefault();\n    if (!this.props.currentTrack) return null;\n    this.handleonPlay();\n    this.audio.play();\n  }\n\n  handleonPlay() {\n    this.setState({\n      play: true\n    });\n    this.audio.volume = this.props.volume;\n    this.interval = setInterval(() => {\n      if (this.audio) {\n        this.setState({\n          time: this.audio.currentTime,\n          duration: this.audio.duration\n        });\n      }\n    }, 500);\n  }\n\n  handleEnded() {\n    if (this.state.shuffle) {\n      this.props.shuffleTracks();\n    } else if (!this.props.nextTrack) {\n      this.setState({\n        play: false\n      });\n      this.audio.pause();\n    } else {\n      this.props.nextTrack();\n    }\n  }\n\n  pause(e) {\n    e.preventDefault();\n    this.setState({\n      play: false\n    });\n    this.audio.pause();\n  }\n\n  nextTrack(e) {\n    e.preventDefault();\n    this.props.nextTrack();\n  }\n\n  prevTrack(e) {\n    e.preventDefault();\n    this.props.prevTrack();\n  }\n\n  updateTime(e) {\n    this.audio.currentTime = e.target.value;\n    this.setState({\n      time: e.target.value\n    });\n  }\n\n  updateVolume(e) {\n    this.props.changeVolume(e.target.value / 100);\n  }\n\n  toggleRepeat(e) {\n    e.preventDefault();\n    this.setState({\n      repeat: !this.state.repeat\n    }, () => {\n      this.audio.loop = this.state.repeat;\n    });\n  }\n\n  toggleShuffle(e) {\n    e.preventDefault();\n    this.setState({\n      shuffle: !this.state.shuffle\n    });\n  }\n\n  toggleMute(e) {\n    this.setState({\n      mute: !this.state.mute\n    }, () => {\n      if (this.props.volume) this.prevVolume = this.props.volume;\n\n      if (this.state.mute) {\n        this.props.changeVolume(0);\n        this.audio.volume = 0;\n      } else {\n        this.props.changeVolume(this.prevVolume);\n        this.audio.volume = this.prevVolume;\n      }\n    });\n  }\n\n  parseTime(time) {\n    if (!time) return \"0:00\";\n    let min = Math.floor(time / 60);\n    let seconds = Math.floor(time - min * 60);\n    if (seconds < 10) seconds = `0${seconds}`;\n    return `${min}:${seconds}`;\n  }\n\n  volumeBtn() {\n    let button;\n    const volume = this.props.volume;\n\n    if (volume >= 0.5) {\n      button = /*#__PURE__*/React.createElement(\"i\", {\n        className: \"fas fa-volume-up\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 22\n        }\n      });\n    } else if (volume < 0.5 && volume > 0) {\n      button = /*#__PURE__*/React.createElement(\"i\", {\n        className: \"fas fa-volume-down\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 22\n        }\n      });\n    } else {\n      button = /*#__PURE__*/React.createElement(\"i\", {\n        className: \"fas fa-volume-mute\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 22\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      onClick: this.toggleMute,\n      className: \"p-volume-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 13\n      }\n    }, button);\n  }\n\n  render() {\n    const playBtn = /*#__PURE__*/React.createElement(\"button\", {\n      className: \"p-button-circle\",\n      onClick: this.play,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: \"fas fa-play\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }\n    }));\n    const pauseBtn = /*#__PURE__*/React.createElement(\"button\", {\n      className: \"p-button-circle\",\n      onClick: this.pause,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: \"fas fa-pause\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }\n    }));\n    const shuffling = this.state.shuffle ? \"-shuffling\" : null;\n    const shuffle = /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.toggleShuffle,\n      className: `p-button-shuffle${shuffling} pbtn`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: \"fas fa-random\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }\n    })); // const active = this.state.repeat ? \"-active\" : null;\n    // const repeat = (\n    //     <button\n    //         className={`p-button-repeat${active} pbtn`}\n    //         onClick={this.toggleRepeat}>\n    //         <i className=\"fas fa-redo\"></i>\n    //     </button>\n    // )\n    // const prevTrackBtn = (\n    //     <button\n    //         onClick={this.prevTrack}\n    //         className=\"p-button-prev pbtn\">\n    //         <i className=\"fas fa-step-backward\"></i>\n    //     </button>\n    // )\n    // const nextTrackBtn = (\n    //     <button\n    //         onClick={this.nextTrack}\n    //         className=\"p-button-fwd pbtn\">\n    //         <i className=\"fas fa-step-forward\"></i>\n    //     </button>\n    // )\n\n    const {\n      play,\n      time,\n      duration\n    } = this.state;\n    const {\n      currentTrack\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"p-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(PlayerInfoContainer, {\n      shuffle: this.state.shuffle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"p-audio-control\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"p-buttons-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"audio\", {\n      src: currentTrack ? currentTrack.songUrl : null,\n      ref: audio => this.audio = audio,\n      onPlay: this.handleonPlay,\n      onEnded: this.handleEnded,\n      autoPlay: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 25\n      }\n    }), shuffle, prevTrackBtn, !play, play, nextTrackBtn, repeat), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"p-timeline-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"p-current-time\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 25\n      }\n    }, this.parseTime(time)), /*#__PURE__*/React.createElement(\"input\", {\n      className: \"p-timeline\",\n      type: \"range\",\n      onChange: this.updateTime,\n      value: time,\n      max: duration,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"p-duration\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 25\n      }\n    }, this.parseTime(duration)))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"p-volume-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: \"/open/queue\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"p-queue-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 44\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: \"fas fa-indent\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 25\n      }\n    }))), this.volumeBtn(), /*#__PURE__*/React.createElement(\"input\", {\n      className: \"p-volume\",\n      type: \"range\",\n      onChange: this.updateVolume,\n      value: this.props.volume * 100,\n      max: \"100\",\n      style: {\n        backgroundImage: '-webkit-gradient(linear, left top, right top, ' + 'color-stop(' + this.props.volume + ', #3c02b0), ' + 'color-stop(' + this.props.volume + ', #666666)' + ')'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\n\nexport default Player;","map":{"version":3,"sources":["/Users/spartan/Downloads/sleepify/frontend/src/components/player/player.js"],"names":["React","PlayerInfoContainer","Link","Player","Component","constructor","props","state","play","time","duration","mute","repeat","shuffle","audio","createRef","bind","handleonPlay","pause","updateTime","parseTime","updateVolume","volumeBtn","toggleMute","toggleRepeat","nextTrack","prevTrack","toggleShuffle","handleEnded","componentDidUpdate","prevProps","volume","currentTrack","clearInterval","interval","undefined","setState","componentWillUnmount","removeEverything","e","preventDefault","setInterval","currentTime","shuffleTracks","target","value","changeVolume","loop","prevVolume","min","Math","floor","seconds","button","render","playBtn","pauseBtn","shuffling","songUrl","prevTrackBtn","nextTrackBtn","backgroundImage"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PlayerInfoContainer from './player_info_container';\nimport { Link } from 'react-router-dom';\n\nclass Player extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            play: false,\n            time: 0,\n            duration: 0,\n            mute: false,\n            repeat: false,\n            shuffle: false,\n        }\n        this.audio = React.createRef();\n        this.play = this.play.bind(this);\n        this.handleonPlay = this.handleonPlay.bind(this);\n        this.pause = this.pause.bind(this);\n        this.updateTime = this.updateTime.bind(this);\n        this.parseTime = this.parseTime.bind(this);\n        this.updateVolume = this.updateVolume.bind(this);\n        this.volumeBtn = this.volumeBtn.bind(this);\n        this.toggleMute = this.toggleMute.bind(this);\n        this.toggleRepeat = this.toggleRepeat.bind(this);\n        this.nextTrack = this.nextTrack.bind(this);\n        this.prevTrack = this.prevTrack.bind(this);\n        this.toggleShuffle = this.toggleShuffle.bind(this);\n        this.handleEnded = this.handleEnded.bind(this);\n      \n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.volume !== this.props.volume) {\n            this.audio.volume = this.props.volume;\n        }\n\n        if (prevProps.currentTrack !== this.props.currentTrack) {\n            clearInterval(this.interval);\n        }\n\n        if (prevProps.currentTrack !== this.props.currentTrack && this.props.currentTrack === undefined) {\n            this.setState({ pause: true });\n            this.audio.pause();\n            clearInterval(this.interval);\n        }\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n        this.props.removeEverything();\n    }\n\n    play(e) {\n        e.preventDefault();\n        if (!this.props.currentTrack) return null;\n        this.handleonPlay();\n        this.audio.play();\n    }\n    \n    handleonPlay() {\n        this.setState({ play: true })\n        this.audio.volume = this.props.volume;\n        this.interval = setInterval(() => {\n            if (this.audio) {\n                this.setState({\n                    time: this.audio.currentTime,\n                    duration: this.audio.duration\n                })\n            }\n        }, 500)   \n    }\n\n    handleEnded() {\n        if (this.state.shuffle) {\n            this.props.shuffleTracks();\n        } else if (!this.props.nextTrack) {\n            this.setState({ play: false })\n            this.audio.pause();\n        } else {\n            this.props.nextTrack();\n        }\n    }\n\n    pause(e) {\n        e.preventDefault();\n        this.setState({ play: false })\n        this.audio.pause();\n    }\n\n    nextTrack(e) {\n        e.preventDefault();\n        this.props.nextTrack()\n    }\n\n    prevTrack(e) {\n        e.preventDefault();\n        this.props.prevTrack();\n    }\n\n    updateTime(e) {\n        this.audio.currentTime = e.target.value;\n        this.setState({ time: e.target.value })\n    }\n\n    updateVolume(e) {\n        this.props.changeVolume(e.target.value / 100)\n    }\n\n    toggleRepeat(e) {\n        e.preventDefault();\n        this.setState({ repeat: !this.state.repeat }, () => {\n            this.audio.loop = this.state.repeat;\n        })\n    }\n\n    toggleShuffle(e) {\n        e.preventDefault();\n        this.setState({ shuffle: !this.state.shuffle });\n    }\n\n    toggleMute(e) {\n        this.setState({ mute: !this.state.mute }, () => {\n            if (this.props.volume) this.prevVolume = this.props.volume;\n            if (this.state.mute) {\n                this.props.changeVolume(0);\n                this.audio.volume = 0;\n            } else {\n                this.props.changeVolume(this.prevVolume);\n                this.audio.volume = this.prevVolume;\n            }\n        })\n    }\n\n    parseTime(time) {\n        if (!time) return \"0:00\";\n        let min = Math.floor(time / 60);\n        let seconds = Math.floor(time - (min * 60));\n        if (seconds < 10) seconds = `0${seconds}`;\n        return `${min}:${seconds}`;\n    }\n\n    volumeBtn() {\n        let button;\n        const volume = this.props.volume;\n        if (volume >= 0.5) {\n            button = <i className=\"fas fa-volume-up\"></i>;\n        } else if (volume < 0.5 && volume > 0) {\n            button = <i className=\"fas fa-volume-down\"></i>;\n        } else {\n            button = <i className=\"fas fa-volume-mute\"></i>;\n        }\n\n        return (\n            <div onClick={this.toggleMute} className=\"p-volume-btn\">\n                {button}\n            </div>\n        )\n\n    }\n\n    render() {\n        const playBtn = (\n            <button\n                className=\"p-button-circle\"\n                onClick={this.play}>\n                <i className=\"fas fa-play\"></i>\n            </button>\n        )\n        const pauseBtn = (\n            <button\n                className=\"p-button-circle\"\n                onClick={this.pause}>\n                <i className=\"fas fa-pause\"></i>\n            </button>\n        )\n        \n        const shuffling = this.state.shuffle ? \"-shuffling\" : null;\n        const shuffle = (\n            <button\n                onClick={this.toggleShuffle}\n                className={`p-button-shuffle${shuffling} pbtn`}>\n                <i className=\"fas fa-random\"></i>\n            </button>\n        )\n\n        // const active = this.state.repeat ? \"-active\" : null;\n        // const repeat = (\n        //     <button\n        //         className={`p-button-repeat${active} pbtn`}\n        //         onClick={this.toggleRepeat}>\n        //         <i className=\"fas fa-redo\"></i>\n        //     </button>\n        // )\n\n        // const prevTrackBtn = (\n        //     <button\n        //         onClick={this.prevTrack}\n        //         className=\"p-button-prev pbtn\">\n        //         <i className=\"fas fa-step-backward\"></i>\n        //     </button>\n        // )\n\n        // const nextTrackBtn = (\n        //     <button\n        //         onClick={this.nextTrack}\n        //         className=\"p-button-fwd pbtn\">\n        //         <i className=\"fas fa-step-forward\"></i>\n        //     </button>\n        // )\n     \n        const { play, time, duration } = this.state;\n        const { currentTrack } = this.props;\n        return (\n            <div className=\"p-container\">\n                <PlayerInfoContainer shuffle={this.state.shuffle} />\n\n                <div className=\"p-audio-control\">\n                    <div className='p-buttons-container'>\n                        <audio src={currentTrack ? currentTrack.songUrl : null}\n                            ref={audio => this.audio = audio}\n                            onPlay={this.handleonPlay}\n                            onEnded={this.handleEnded}\n                            autoPlay />\n                        {shuffle}\n                        {prevTrackBtn}\n                        {!play }\n                        {play}\n                        {nextTrackBtn}\n                        {repeat}\n                    </div>\n\n                    <div className=\"p-timeline-container\">\n                        <span className=\"p-current-time\">\n                            {this.parseTime(time)}\n                        </span>\n                        <input\n                            className=\"p-timeline\"\n                            type=\"range\"\n                            onChange={this.updateTime}\n                            value={time}\n                            max={duration}>\n                        </input>\n\n                        <span className=\"p-duration\">\n                            {this.parseTime(duration)}\n                        </span>\n                    </div>\n                </div>\n\n                <div className=\"p-volume-container\">\n                    <Link to=\"/open/queue\"><div className=\"p-queue-list\">\n                        <i className=\"fas fa-indent\"></i>\n                    </div></Link>\n                    {this.volumeBtn()}\n                    <input\n                        className=\"p-volume\"\n                        type=\"range\"\n                        onChange={this.updateVolume}\n                        value={this.props.volume * 100}\n                        max=\"100\"\n                        style={{\n                            backgroundImage: '-webkit-gradient(linear, left top, right top, '\n                                + 'color-stop(' + this.props.volume + ', #3c02b0), '\n                                + 'color-stop(' + this.props.volume + ', #666666)'\n                                + ')'\n                        }}>\n                    </input>\n                </div>\n\n            </div>\n\n\n\n        )\n    }\n}\n\nexport default Player;\n"]},"metadata":{},"sourceType":"module"}