{"ast":null,"code":"import { RECEIVE_USER } from \"../actions/user_actions\";\nimport { TOGGLE_ALBUM_LIKE } from \"../actions/album_actions\";\nimport { CHANGE_MULTIPLE_SONG_LIKES, TOGGLE_SONG_LIKE } from \"../actions/song_actions\";\nimport { merge } from 'lodash';\nexport default function (state = {}, action) {\n  let newState;\n  let currentUserId;\n\n  switch (action.type) {\n    case RECEIVE_USER:\n      const user = {};\n      user[action.user.data._id] = action.user.data;\n      delete user[action.user.data._id].password;\n      return merge({}, user, state);\n\n    case TOGGLE_SONG_LIKE:\n      currentUserId = action.likeData.data.userId;\n      newState = merge({}, state);\n\n      if (newState[currentUserId].likedSongs.includes(action.likeData.data.songId)) {\n        const index = newState[currentUserId].likedSongs.indexOf(action.likeData.data.songId);\n        newState[currentUserId].likedSongs.splice(index, 1);\n      } else {\n        newState[currentUserId].likedSongs.push(action.likeData.data.songId);\n      }\n\n      return newState;\n\n    case TOGGLE_ALBUM_LIKE:\n      newState = merge({}, state);\n      currentUserId = action.likeData.data.userId;\n\n      if (newState[currentUserId].likedAlbums.includes(action.likeData.data.albumId)) {\n        const albumIdx = newState[currentUserId].likedAlbums.indexOf(action.likeData.data.albumId);\n        newState[currentUserId].likedAlbums.splice(albumIdx, 1);\n      } else {\n        newState[currentUserId].likedAlbums.push(action.likeData.data.albumId);\n      }\n\n      return newState;\n\n    case CHANGE_MULTIPLE_SONG_LIKES:\n      newState = merge({}, state);\n\n      if (action.likeData.data.songs.every(song => newState.currentUser.likedSongs.includes(song))) {\n        action.likeData.data.songs.forEach(song => {\n          let songIdx = newState.currentUser.likedSongs.indexOf(song);\n          newState.currentUser.likedSongs.splice(songIdx, 1);\n        });\n      } else {\n        action.likeData.data.songs.forEach(song => {\n          if (!newState.currentUser.likedSongs.includes(song)) {\n            newState.currentUser.likedSongs.push(song);\n          }\n        });\n      }\n\n      return newState;\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/spartan/Downloads/sleepify/frontend/src/reducers/users_reducer.js"],"names":["RECEIVE_USER","TOGGLE_ALBUM_LIKE","CHANGE_MULTIPLE_SONG_LIKES","TOGGLE_SONG_LIKE","merge","state","action","newState","currentUserId","type","user","data","_id","password","likeData","userId","likedSongs","includes","songId","index","indexOf","splice","push","likedAlbums","albumId","albumIdx","songs","every","song","currentUser","forEach","songIdx"],"mappings":"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","sourcesContent":["import { RECEIVE_USER } from \"../actions/user_actions\";\nimport { TOGGLE_ALBUM_LIKE } from \"../actions/album_actions\";\nimport { CHANGE_MULTIPLE_SONG_LIKES, TOGGLE_SONG_LIKE } from \"../actions/song_actions\";\nimport { merge } from 'lodash';\n\nexport default function(state = {}, action) {\n    let newState;\n    let currentUserId;\n    switch (action.type) {\n        case RECEIVE_USER:\n            const user = {};\n            user[action.user.data._id] = action.user.data;\n            delete user[action.user.data._id].password\n            return merge({}, user, state);\n        case TOGGLE_SONG_LIKE: \n            currentUserId = action.likeData.data.userId;\n            newState = merge({}, state);\n            if(newState[currentUserId].likedSongs.includes(action.likeData.data.songId)) {\n                const index = newState[currentUserId].likedSongs.indexOf(action.likeData.data.songId);\n                newState[currentUserId].likedSongs.splice(index,1);\n            } else {\n                newState[currentUserId].likedSongs.push(action.likeData.data.songId);\n            }\n            return newState;\n        case TOGGLE_ALBUM_LIKE:\n            newState = merge({}, state);\n            currentUserId = action.likeData.data.userId;\n            if(newState[currentUserId].likedAlbums.includes(action.likeData.data.albumId)) {\n              const albumIdx = newState[currentUserId].likedAlbums.indexOf(action.likeData.data.albumId);\n              newState[currentUserId].likedAlbums.splice(albumIdx,1);\n            } else {\n              newState[currentUserId].likedAlbums.push(action.likeData.data.albumId);\n            }\n            return newState;\n        case CHANGE_MULTIPLE_SONG_LIKES:\n            newState = merge({}, state);\n              if(action.likeData.data.songs.every((song) => newState.currentUser.likedSongs.includes(song))) {\n                action.likeData.data.songs.forEach(song => {\n                  let songIdx = newState.currentUser.likedSongs.indexOf(song);\n                  newState.currentUser.likedSongs.splice(songIdx, 1);\n                })\n              } else {\n                action.likeData.data.songs.forEach(song => {\n                  if (!newState.currentUser.likedSongs.includes(song)) {\n                    newState.currentUser.likedSongs.push(song)\n                  }\n                }) \n              }\n            return newState;\n        default:\n            return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}