{"ast":null,"code":"import * as PlaylistUtil from \"../util/playlist_util\";\nexport const RENAME_PLAYLIST = \"RENAME_PLAYLIST;\";\nexport const RECEIVE_PLAYLIST = \"RECEIVE_PLAYLIST\";\nexport const RECEIVE_USER_PLAYLISTS = \"RECEIVE_USER_PLAYLISTS\";\nexport const SHOW_PLAYLIST = \"SHOW_PLAYLIST\";\nexport const DELETE_PLAYLIST = \"DELETE_PLAYLIST\";\n\nconst receivePlaylist = playlist => {\n  return {\n    type: RECEIVE_PLAYLIST,\n    playlist\n  };\n};\n\nconst returnRename = playlist => {\n  return {\n    type: RENAME_PLAYLIST,\n    playlist\n  };\n};\n\nconst receivePlaylists = playlists => {\n  return {\n    type: RECEIVE_USER_PLAYLISTS,\n    playlists\n  };\n};\n\nconst deletePlaylist = playlist => {\n  return {\n    type: DELETE_PLAYLIST,\n    playlist\n  };\n};\n\nexport const addSongToPlaylist = (songId, playlistId) => dispatch => {\n  return PlaylistUtil.addSongToPlaylist(songId, playlistId).then(playlist => dispatch(receivePlaylist(playlist)));\n};\nexport const createPlaylist = playlist => dispatch => {\n  return PlaylistUtil.createPlaylist(playlist).then(playlist => dispatch(receivePlaylist(playlist)));\n};\nexport const fetchUserPlaylists = userId => dispatch => {\n  return PlaylistUtil.fetchUserPlaylists(userId).then(playlists => dispatch(receivePlaylists(playlists)));\n};\nexport const removePlaylist = playlistData => dispatch => {\n  return PlaylistUtil.deletePlaylist(playlistData).then(playlist => dispatch(deletePlaylist(playlist.data)));\n};\nexport const renamePlaylist = playlistData => dispatch => {\n  return PlaylistUtil.renamePlaylist(playlistData).then(playlist => dispatch(returnRename(playlist)));\n};\n\nconst showPlaylist = playlist => {\n  return {\n    type: SHOW_PLAYLIST,\n    playlist\n  };\n};\n\nexport const fetchPlaylist = playlistId => dispatch => {\n  return PlaylistUtil.fetchPlaylist(playlistId).then(playlist => dispatch(showPlaylist(playlist)));\n};","map":{"version":3,"sources":["/Users/spartan/Downloads/sleepify/frontend/src/actions/playlist_actions.js"],"names":["PlaylistUtil","RENAME_PLAYLIST","RECEIVE_PLAYLIST","RECEIVE_USER_PLAYLISTS","SHOW_PLAYLIST","DELETE_PLAYLIST","receivePlaylist","playlist","type","returnRename","receivePlaylists","playlists","deletePlaylist","addSongToPlaylist","songId","playlistId","dispatch","then","createPlaylist","fetchUserPlaylists","userId","removePlaylist","playlistData","data","renamePlaylist","showPlaylist","fetchPlaylist"],"mappings":"AAAA,OAAO,KAAKA,YAAZ,MAA8B,uBAA9B;AACA,OAAO,MAAMC,eAAe,GAAG,kBAAxB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,sBAAsB,GAAG,wBAA/B;AACP,OAAO,MAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;;AAIP,MAAMC,eAAe,GAAGC,QAAQ,IAAI;AAClC,SAAO;AACLC,IAAAA,IAAI,EAAEN,gBADD;AAELK,IAAAA;AAFK,GAAP;AAID,CALD;;AAOA,MAAME,YAAY,GAAGF,QAAQ,IAAI;AAC/B,SAAO;AACLC,IAAAA,IAAI,EAAEP,eADD;AAELM,IAAAA;AAFK,GAAP;AAID,CALD;;AAOA,MAAMG,gBAAgB,GAAGC,SAAS,IAAI;AACpC,SAAO;AACLH,IAAAA,IAAI,EAAEL,sBADD;AAELQ,IAAAA;AAFK,GAAP;AAID,CALD;;AAOA,MAAMC,cAAc,GAAGL,QAAQ,IAAI;AACjC,SAAO;AACLC,IAAAA,IAAI,EAAEH,eADD;AAELE,IAAAA;AAFK,GAAP;AAID,CALD;;AAMA,OAAO,MAAMM,iBAAiB,GAAG,CAACC,MAAD,EAASC,UAAT,KAAwBC,QAAQ,IAAI;AACnE,SAAOhB,YAAY,CAACa,iBAAb,CAA+BC,MAA/B,EAAuCC,UAAvC,EAAmDE,IAAnD,CAAwDV,QAAQ,IACrES,QAAQ,CAACV,eAAe,CAACC,QAAD,CAAhB,CADH,CAAP;AAGD,CAJM;AAMP,OAAO,MAAMW,cAAc,GAAGX,QAAQ,IAAIS,QAAQ,IAAI;AACpD,SAAOhB,YAAY,CAACkB,cAAb,CAA4BX,QAA5B,EAAsCU,IAAtC,CAA2CV,QAAQ,IACxDS,QAAQ,CAACV,eAAe,CAACC,QAAD,CAAhB,CADH,CAAP;AAGD,CAJM;AAMP,OAAO,MAAMY,kBAAkB,GAAGC,MAAM,IAAIJ,QAAQ,IAAI;AACtD,SAAOhB,YAAY,CAACmB,kBAAb,CAAgCC,MAAhC,EAAwCH,IAAxC,CAA6CN,SAAS,IAC3DK,QAAQ,CAACN,gBAAgB,CAACC,SAAD,CAAjB,CADH,CAAP;AAGD,CAJM;AAMP,OAAO,MAAMU,cAAc,GAAGC,YAAY,IAAIN,QAAQ,IAAI;AACxD,SAAOhB,YAAY,CAACY,cAAb,CAA4BU,YAA5B,EAA0CL,IAA1C,CAA+CV,QAAQ,IAC5DS,QAAQ,CAACJ,cAAc,CAACL,QAAQ,CAACgB,IAAV,CAAf,CADH,CAAP;AAGD,CAJM;AAMP,OAAO,MAAMC,cAAc,GAAGF,YAAY,IAAIN,QAAQ,IAAI;AACxD,SAAOhB,YAAY,CAACwB,cAAb,CAA4BF,YAA5B,EAA0CL,IAA1C,CAA+CV,QAAQ,IAC5DS,QAAQ,CAACP,YAAY,CAACF,QAAD,CAAb,CADH,CAAP;AAGD,CAJM;;AAOP,MAAMkB,YAAY,GAAGlB,QAAQ,IAAI;AAC/B,SAAO;AACLC,IAAAA,IAAI,EAAEJ,aADD;AAELG,IAAAA;AAFK,GAAP;AAID,CALD;;AAOA,OAAO,MAAMmB,aAAa,GAAGX,UAAU,IAAIC,QAAQ,IAAI;AACrD,SAAOhB,YAAY,CAAC0B,aAAb,CAA2BX,UAA3B,EACJE,IADI,CACCV,QAAQ,IAAIS,QAAQ,CAACS,YAAY,CAAClB,QAAD,CAAb,CADrB,CAAP;AAED,CAHM","sourcesContent":["import * as PlaylistUtil from \"../util/playlist_util\";\nexport const RENAME_PLAYLIST = \"RENAME_PLAYLIST;\"\nexport const RECEIVE_PLAYLIST = \"RECEIVE_PLAYLIST\";\nexport const RECEIVE_USER_PLAYLISTS = \"RECEIVE_USER_PLAYLISTS\";\nexport const SHOW_PLAYLIST = \"SHOW_PLAYLIST\";\nexport const DELETE_PLAYLIST = \"DELETE_PLAYLIST\"\n\n\n\nconst receivePlaylist = playlist => {\n  return {\n    type: RECEIVE_PLAYLIST,\n    playlist\n  };\n};\n\nconst returnRename = playlist => {\n  return {\n    type: RENAME_PLAYLIST,\n    playlist\n  };\n};\n\nconst receivePlaylists = playlists => {\n  return {\n    type: RECEIVE_USER_PLAYLISTS,\n    playlists\n  };\n};\n\nconst deletePlaylist = playlist => {\n  return {\n    type: DELETE_PLAYLIST,\n    playlist\n  }\n}\nexport const addSongToPlaylist = (songId, playlistId) => dispatch => {\n  return PlaylistUtil.addSongToPlaylist(songId, playlistId).then(playlist =>\n    dispatch(receivePlaylist(playlist))\n  );\n};\n\nexport const createPlaylist = playlist => dispatch => {\n  return PlaylistUtil.createPlaylist(playlist).then(playlist =>\n    dispatch(receivePlaylist(playlist))\n  );\n};\n\nexport const fetchUserPlaylists = userId => dispatch => {\n  return PlaylistUtil.fetchUserPlaylists(userId).then(playlists =>\n    dispatch(receivePlaylists(playlists))\n  );\n};\n\nexport const removePlaylist = playlistData => dispatch => {\n  return PlaylistUtil.deletePlaylist(playlistData).then(playlist =>\n    dispatch(deletePlaylist(playlist.data))\n  )\n}\n\nexport const renamePlaylist = playlistData => dispatch => {\n  return PlaylistUtil.renamePlaylist(playlistData).then(playlist =>\n    dispatch(returnRename(playlist))\n  )\n}\n\n\nconst showPlaylist = playlist => {\n  return {\n    type: SHOW_PLAYLIST,\n    playlist\n  }\n}\n\nexport const fetchPlaylist = playlistId => dispatch => {\n  return PlaylistUtil.fetchPlaylist(playlistId)\n    .then(playlist => dispatch(showPlaylist(playlist)));\n};\n\n"]},"metadata":{},"sourceType":"module"}