{"ast":null,"code":"import { PLAY_TRACK, PLAY_ALL_TRACKS, ADD_TRACK, REMOVE_TRACK, REMOVE_ALL_TRACKS, NEXT_TRACK, PREV_TRACK, SHUFFLE_TRACKS, MOVE_UP, MOVE_DOWN, REMOVE_EVERYTHING } from '../actions/player_queue_actions';\n\nconst playerQueueReducer = (state = [], action) => {\n  Object.freeze(state);\n  let nextState = [...state];\n\n  switch (action.type) {\n    case PLAY_TRACK:\n      return [action.track];\n\n    case PLAY_ALL_TRACKS:\n      return action.tracks;\n\n    case ADD_TRACK:\n      nextState.push(action.track);\n      return nextState;\n\n    case REMOVE_TRACK:\n      return nextState.filter(track => track._id !== action.trackId);\n\n    case REMOVE_ALL_TRACKS:\n      return [nextState[0]];\n\n    case NEXT_TRACK:\n      nextState.push(nextState.shift());\n      return nextState;\n\n    case PREV_TRACK:\n      nextState.unshift(nextState.pop());\n      return nextState;\n\n    case SHUFFLE_TRACKS:\n      return shuffleArray(nextState, state[0]);\n\n    case MOVE_UP:\n      return moveUp(nextState, action.track);\n\n    case MOVE_DOWN:\n      return moveDown(nextState, action.track);\n\n    case REMOVE_EVERYTHING:\n      return [];\n\n    default:\n      return state;\n  }\n};\n\nconst shuffleArray = (arr, first) => {\n  let temp;\n  let newPos;\n\n  while (arr[0] === first) {\n    for (let i = 0; i < arr.length; i++) {\n      newPos = Math.floor(Math.random() * (i + 1));\n      temp = arr[i];\n      arr[i] = arr[newPos];\n      arr[newPos] = temp;\n    }\n  }\n\n  return arr;\n};\n\nconst moveUp = (arr, track) => {\n  let idx = arr.indexOf(track);\n\n  if (idx !== 0) {\n    arr[idx] = arr[idx - 1];\n    arr[idx - 1] = track;\n    return arr;\n  } else {\n    return arr;\n  }\n};\n\nconst moveDown = (arr, track) => {\n  let idx = arr.indexOf(track);\n\n  if (idx !== arr.length - 1) {\n    arr[idx] = arr[idx + 1];\n    arr[idx + 1] = track;\n    return arr;\n  } else {\n    return arr;\n  }\n};\n\nexport default playerQueueReducer;","map":{"version":3,"sources":["/Users/spartan/Downloads/sleepify/frontend/src/reducers/player_queue_reducer.js"],"names":["PLAY_TRACK","PLAY_ALL_TRACKS","ADD_TRACK","REMOVE_TRACK","REMOVE_ALL_TRACKS","NEXT_TRACK","PREV_TRACK","SHUFFLE_TRACKS","MOVE_UP","MOVE_DOWN","REMOVE_EVERYTHING","playerQueueReducer","state","action","Object","freeze","nextState","type","track","tracks","push","filter","_id","trackId","shift","unshift","pop","shuffleArray","moveUp","moveDown","arr","first","temp","newPos","i","length","Math","floor","random","idx","indexOf"],"mappings":"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","sourcesContent":["import { \n    PLAY_TRACK,\n    PLAY_ALL_TRACKS,\n    ADD_TRACK,\n    REMOVE_TRACK,\n    REMOVE_ALL_TRACKS,\n    NEXT_TRACK,\n    PREV_TRACK,\n    SHUFFLE_TRACKS,\n    MOVE_UP,\n    MOVE_DOWN,\n    REMOVE_EVERYTHING\n} from '../actions/player_queue_actions';\n\nconst playerQueueReducer = (state=[], action) => {\n    Object.freeze(state);\n    let nextState = [...state]\n    switch (action.type) {\n        case PLAY_TRACK:\n            return [action.track];\n        case PLAY_ALL_TRACKS:\n            return action.tracks;\n        case ADD_TRACK: \n            nextState.push(action.track);\n            return nextState;\n        case REMOVE_TRACK:\n            return nextState.filter(track => track._id !== action.trackId);\n        case REMOVE_ALL_TRACKS:\n            return [nextState[0]];\n        case NEXT_TRACK:\n            nextState.push(nextState.shift());\n            return nextState;\n        case PREV_TRACK:\n            nextState.unshift(nextState.pop());\n            return nextState;\n        case SHUFFLE_TRACKS:\n            return shuffleArray(nextState, state[0]);\n        case MOVE_UP: \n            return moveUp(nextState, action.track);\n        case MOVE_DOWN: \n            return moveDown(nextState, action.track);\n        case REMOVE_EVERYTHING:\n            return [];\n        default: \n            return state;\n    }\n}\n\nconst shuffleArray = (arr, first) => {\n    let temp;\n    let newPos;\n    while (arr[0] === first) {\n        for (let i=0; i < arr.length; i++) {\n            newPos = Math.floor(Math.random() * (i+1));\n            temp = arr[i];\n            arr[i] = arr[newPos];\n            arr[newPos] = temp;\n        }\n    }\n    return arr;\n}\n\nconst moveUp = (arr, track) => {\n    let idx = arr.indexOf(track);\n    if (idx !== 0) {\n        arr[idx] = arr[idx-1]\n        arr[idx-1] = track;\n        return arr;\n    } else {\n        return arr;\n    }\n\n}\n\nconst moveDown = (arr, track) => {\n    let idx = arr.indexOf(track);\n    if (idx !== arr.length-1) {\n        arr[idx] = arr[idx+1]\n        arr[idx+1] = track;\n        return arr;\n    } else {\n        return arr;\n    }\n}\n\nexport default playerQueueReducer;\n\n"]},"metadata":{},"sourceType":"module"}